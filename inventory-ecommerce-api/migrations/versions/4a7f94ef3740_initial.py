"""Initial

Revision ID: 4a7f94ef3740
Revises: e78c823a9dc4
Create Date: 2025-08-12 18:15:29.893672

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4a7f94ef3740'
down_revision = 'e78c823a9dc4'
branch_labels = None
depends_on = None


def upgrade():
    # Drop foreign key constraints first
    op.drop_constraint('products_category_id_fkey', 'products', type_='foreignkey')
    op.drop_constraint('stocks_category_id_fkey', 'stocks', type_='foreignkey')
    # Now drop the categories table
    op.drop_table('categories')
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('return_products')
    op.drop_table('stock_movements')
    op.drop_table('transactions')
    op.drop_table('customers')
    op.drop_table('cart_items')
    op.drop_table('transaction_items')
    op.drop_table('products')
    op.drop_table('carts')
    op.drop_table('stocks')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('stocks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_trash', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='stocks_category_id_fkey'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='stocks_product_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='stocks_pkey')
    )
    op.create_table('carts',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('carts_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_trash', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='carts_customer_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='carts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('products',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('products_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_trash', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='products_category_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='products_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('transaction_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price_per_unit', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('is_trash', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='transaction_items_product_id_fkey'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], name='transaction_items_transaction_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='transaction_items_pkey')
    )
    op.create_table('cart_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('cart_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_trash', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['cart_id'], ['carts.id'], name='cart_items_cart_id_fkey'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='cart_items_product_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='cart_items_pkey')
    )
    op.create_table('customers',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('customers_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_trash', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='customers_pkey'),
    sa.UniqueConstraint('email', name='customers_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('cart_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_trash', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['cart_id'], ['carts.id'], name='transactions_cart_id_fkey'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='transactions_customer_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='transactions_pkey')
    )
    op.create_table('stock_movements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity_change', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_trash', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='stock_movements_product_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='stock_movements_pkey')
    )
    op.create_table('categories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('categories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_trash', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='categories_pkey'),
    sa.UniqueConstraint('name', name='categories_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('return_products',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_trash', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='return_products_product_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='return_products_pkey')
    )
    # ### end Alembic commands ###
